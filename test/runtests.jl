using KinovaGen3
using LinearAlgebra
using StaticArrays
using Test

@testset "ForwardKinematics" begin
    # Test configurations
    q = SA[103.3 7.3 15.7 -113.1 232.7 120.3 271;
           100.5 45 311.2 147.7 107.6 120.3 146.2;
           349.9 75.8 217 15.5 107.6 250.3 150.6;
           104.9 -20.2 239 -1.8 224.4 50.1 229.5;
           33.2 85.2 30.2 -123.7 93.9 70.5 154.5;
           231.4 53.6 233.3 20.7 238.9 257.5 255.1;
           296.8 -80.1 216 99.5 207.9 60.9 284.9;
           272.7 -42.8 133 77.6 257.7 320.4 147.2;
           23.1 85.6 246.3 -135.7 334.9 52.1 279.6] * π / 180.0

    # The following end-effector positions are obtained from the robot's web interface
    x = SA[0.157 0.076 0.551;
           -0.051 -0.328 0.307;
           0.594 0.052 0.615;
           -0.059 0.328 1.068;
           0.144 -0.102 0.647;
           -0.506 0.279 0.658;
           -0.408 -0.397 0.007;
           0.223 -0.628 0.386;
           0.05 -0.428 0.189]

    for i = 1:9
        x_test, R_test = KinovaGen3.forward_kinematics(q[i, :])
        @test x_test ≈ x[i, :] atol=0.001
    end
end

@testset "Jacobian" begin
    # Test configurations
    q = SA[103.3 7.3 15.7 -113.1 232.7 120.3 271;
           100.5 45 311.2 147.7 107.6 120.3 146.2;
           349.9 75.8 217 15.5 107.6 250.3 150.6;
           104.9 -20.2 239 -1.8 224.4 50.1 229.5;
           33.2 85.2 30.2 -123.7 93.9 70.5 154.5;
           231.4 53.6 233.3 20.7 238.9 257.5 255.1;
           296.8 -80.1 216 99.5 207.9 60.9 284.9;
           272.7 -42.8 133 77.6 257.7 320.4 147.2;
           23.1 85.6 246.3 -135.7 334.9 52.1 279.6] * π / 180.0

    # 2-norm of the Jacobian matrix calculated for each test configuration using
    # pyKinovaGen3
    norm_J = SA[2.695290125640038
                2.715169687857208
                2.8232396808761484
                2.839615763639152
                2.7393357697737786
                2.8199282342881027
                2.8436936137861863
                2.8771005578029936
                2.7602135697255377]

    for i = 1:9
        J = KinovaGen3.jacobian(q[i, :])
        @test norm(J) ≈ norm_J[i] atol=1e-15
    end
end

@testset "InverseKinematics" begin
    # Test configurations
    q = SA[103.3 7.3 15.7 -113.1 232.7 120.3 271;
           100.5 45 311.2 147.7 107.6 120.3 146.2;
           349.9 75.8 217 15.5 107.6 250.3 150.6;
           104.9 -20.2 239 -1.8 224.4 50.1 229.5;
           33.2 85.2 30.2 -123.7 93.9 70.5 154.5;
           231.4 53.6 233.3 20.7 238.9 257.5 255.1;
           296.8 -80.1 216 99.5 207.9 60.9 284.9;
           272.7 -42.8 133 77.6 257.7 320.4 147.2;
           23.1 85.6 246.3 -135.7 334.9 52.1 279.6] * π / 180.0

    xp = SA[0.37913358 0.05201567 0.05618164 0.3221653  0.22460208 0.04492213;
            0.54980489 0.95178951 0.6014357  0.49367242 0.60752464 0.87982163;
            0.37464154 0.70740932 0.09320967 0.71905452 0.71251494 0.59266558;
            0.95344847 0.85010589 0.68121263 0.44881626 0.64734616 0.95044545;
            0.27108066 0.14326585 0.470225   0.54430439 0.68652861 0.22678159;
            0.97805432 0.5106401  0.4461462  0.47608858 0.76061427 0.16155692;
            0.70498752 0.8470692  0.7078881  0.11479064 0.23434371 0.33923727;
            0.82223081 0.23369189 0.60574455 0.26198261 0.21864563 0.43424463;
            0.52873201 0.51725611 0.25344322 0.44418415 0.18362903 0.75022064]

    qp_from_python = SA[ 0.44877095 -0.41566298  0.84161937  0.73407726  0.60312583 -1.00270618 1.1429688;
                        -2.32426984 -1.86514162 -2.52925287  2.54118623 -5.24227308  0.85814515 -1.46926443;
                        -3.49314037 -2.83142466 -0.76611799 -8.71785965 -0.66757821 -1.42309336 -4.18051488;
                        -726.97521681  135.36696097  431.17082275  672.95745622   19.85418536 273.0699116   359.17777141;
                        -0.80893421 -0.87329682 -0.05491393  1.34934634 -0.48731478  0.15424436 0.49460045;
                        2.36154829 -0.47626926 -1.04352742  0.96870512 -0.85362926 -0.82195334 0.37658723;
                        -0.59440601  1.58357619  0.63003207  4.61126112  0.06716658  2.93111448 1.51862017;
                        -1.3246686   0.23949532 -0.92939033 -1.51420677 -1.60095383 -2.12359715 1.73084858;
                        -1.93342792 -0.93719332  0.10332962 -1.40392853  0.48300143 -0.08862292 0.40129449]

    qp = zeros(MVector{7})
    J = zeros(MMatrix{6, 7})

    for i = 1:9
        KinovaGen3.inverse_kinematics!(q[i, :], xp[i, :], qp, J)
        @test qp ≈ qp_from_python[i, :] atol=1e-5
    end

    for i = 1:9
        @test KinovaGen3.inverse_kinematics(q[i, :], xp[i, :]) ≈ qp_from_python[i, :] atol=1e-5
    end
end

@testset "MassMatrix" begin
    # Test configurations
    q = SA[103.3 7.3 15.7 -113.1 232.7 120.3 271;
           100.5 45 311.2 147.7 107.6 120.3 146.2;
           349.9 75.8 217 15.5 107.6 250.3 150.6;
           104.9 -20.2 239 -1.8 224.4 50.1 229.5;
           33.2 85.2 30.2 -123.7 93.9 70.5 154.5;
           231.4 53.6 233.3 20.7 238.9 257.5 255.1;
           296.8 -80.1 216 99.5 207.9 60.9 284.9;
           272.7 -42.8 133 77.6 257.7 320.4 147.2;
           23.1 85.6 246.3 -135.7 334.9 52.1 279.6] * π / 180.0

    # 2-norm of the mass matrix calculated for each test configuration using
    # pyKinovaGen3
    norm_M = SA[0.6410865923694515
                0.5525829071524816
                1.84257470802987
                1.5681068449989206
                0.7482246903685248
                1.611311808057207
                1.2521452057707438
                1.4551974690958775
                0.7301712904155682]

    M = zeros(MMatrix{7, 7})

    for i = 1:9
        KinovaGen3.mass_matrix!(q[i, :], M)
        @test norm(M) ≈ norm_M[i] atol=1e-15
    end

    for i = 1:9
        @test norm(KinovaGen3.mass_matrix(q[i, :])) ≈ norm_M[i] atol=1e-15
    end
end

@testset "Coriolis" begin
    # Test configurations
    q = SA[103.3 7.3 15.7 -113.1 232.7 120.3 271;
           100.5 45 311.2 147.7 107.6 120.3 146.2;
           349.9 75.8 217 15.5 107.6 250.3 150.6;
           104.9 -20.2 239 -1.8 224.4 50.1 229.5;
           33.2 85.2 30.2 -123.7 93.9 70.5 154.5;
           231.4 53.6 233.3 20.7 238.9 257.5 255.1;
           296.8 -80.1 216 99.5 207.9 60.9 284.9;
           272.7 -42.8 133 77.6 257.7 320.4 147.2;
           23.1 85.6 246.3 -135.7 334.9 52.1 279.6] * π / 180.0

    qp = SA[0.1026351 0.20539602 0.85946332 0.80950144 0.36532309 0.78122997 0.4751604;
            0.10856973 0.690186   0.08958096 0.32530516 0.31637555 0.92116429 0.26750721;
            0.08940814 0.0974013  0.01403076 0.18344391 0.22578742 0.8971075 0.03972401;
            0.26143409 0.48511786 0.65302783 0.57185839 0.44296704 0.43706245 0.06520865;
            0.29455941 0.38621756 0.38853118 0.21799793 0.87184739 0.57575642 0.02546293;
            0.15032411 0.51058298 0.28696948 0.32800723 0.34063014 0.45425178 0.94680521;
            0.06297814 0.85031833 0.56939261 0.17961945 0.90145217 0.24107656 0.7023451;
            0.41185759 0.40660954 0.15792639 0.76208968 0.02833752 0.65020308 0.76652352;
            0.19695845 0.60678769 0.39882284 0.30887971 0.48966335 0.85382816 0.00933069]

    # Coriolis term calculated for each test configuration using pyKinovaGen3
    C_from_python = SA[0.07533597  0.35590393  0.08635783 -0.1131303  -0.01472274  0.03763292 0.0010963;
                      -0.01534259 -0.05876409 -0.03967154  0.03603818  0.00458104  0.00787022 -0.00052261;
                      -0.04165922  0.03400086  0.00822115 -0.0004899   0.00180034 -0.00120533 0.00017504;
                      -0.01609256  0.44997874 -0.02113293 -0.06391615 -0.0187859  -0.00535547 0.00106505;
                       0.04006996  0.0421934  -0.01101251 -0.08235405  0.01637889  0.00511487 -0.00020417;
                       0.06245223  0.03897293  0.00718487  0.009244    0.00042694 -0.02360857 0.00066772;
                       0.13371796 -0.15917884  0.02990321  0.35102371  0.01732359 -0.02531607 -0.00164167;
                      -0.07106474 -0.03359348  0.00509799  0.09599877 -0.00918135 -0.00908778 0.00078546;
                      -0.02238271  0.0230467  -0.05647615 -0.03861008  0.01421055 -0.00438187 -0.00079068]

    C = zeros(MVector{7})

    for i = 1:9
        KinovaGen3.coriolis!(q[i, :], qp[i, :], C)
        @test C ≈ C_from_python[i, :] atol=1e-1
    end

    for i = 1:9
        @test KinovaGen3.coriolis(q[i, :], qp[i, :]) ≈ C_from_python[i, :] atol=1e-1
    end
end